#include <cstdio>
#include <cmath>
#include <complex>
#include <cstdlib>
#include <gmpxx.h>
//#include "/home/jaksa/gmp-5.1.1/gmpxx.h"

using namespace std;

typedef std::complex<double> dcomplex;

// This implementation is based on a Fortran code written by
// A. Poteryaev <Alexander.Poteryaev _at_ cpht.polytechnique.fr>
//
// The original algorithm is described in
// H. J. Vidberg, J. W. Serene. J. Low Temp. Phys. 29, 3-4, 179 (1977)

struct gmp_complex {
 mpf_class re, im;
 gmp_complex operator* (const gmp_complex &rhs){ return { rhs.re*re-rhs.im*im, rhs.re*im+rhs.im*re }; }
 friend gmp_complex inverse (const gmp_complex &rhs){ mpf_class d=rhs.re*rhs.re + rhs.im*rhs.im; return { rhs.re/d, -rhs.im/d}; }
 gmp_complex operator/ (const gmp_complex &rhs){ return (*this)*inverse(rhs); }
 gmp_complex operator+ (const gmp_complex &rhs){ return { rhs.re + re, rhs.im + im }; }
 gmp_complex operator- (const gmp_complex &rhs){ return { re - rhs.re, im - rhs.im }; }
 friend mpf_class real(const gmp_complex &rhs) { return rhs.re; }
 friend mpf_class imag(const gmp_complex &rhs) { return rhs.im; }
 gmp_complex& operator= (const std::complex<double> &rhs) { re = real(rhs); im = imag(rhs); return *this; }
 friend std::ostream & operator << (std::ostream & out,gmp_complex const & r) { return out << " gmp_complex("<<r.re<<","<<r.im<<")"<<std::endl ;}
};

mpf_class abs(mpf_class a)
{
  return ( a>0.0 ) ? a : -a;

}


void PrintFunc(const char* FileName, int N, complex<double>* Y, double* X)
{
  FILE *f;
  f = fopen(FileName, "w");
  for (int i=0; i<N; i++)
    fprintf(f,"%.15le %.15le %.15le\n", X[i], real(Y[i]), imag(Y[i]));
  fclose(f);
}

void ReadFunc(const char* FileName, int &N, complex<double>* &Y, double* &X)
{ // reads file formatted like 
  //  X  ReY(X) ImY(X)
  //----open file---//
  FILE *f;
  f = fopen(FileName, "r");
  if (f==NULL) perror ("Error opening file");
  
  //----count rows----//
  int i=0;
  char str[1000];  
  while (!feof(f))
  {  
    fgets ( str, 1000, f ); 
    if (str[0]=='\n') continue;
    i++;
  }
  N=i-1;

  printf("N: %d \n", N);
  fclose(f);
 
  X = new double[N];
  Y = new complex<double>[N];

  f = fopen(FileName, "r");
   
  for (int i=0; i<N; i++)
  { double Dummy1,Dummy2,Dummy3;
    fscanf(f, "%le", &Dummy1);
    fscanf(f, "%le", &Dummy2);
    fscanf(f, "%le", &Dummy3);
    X[i]=Dummy1;
    Y[i]=complex<double>(Dummy2,Dummy3);
  }
  fclose(f);
}


const double pi = 3.14159265359;
const complex<double> ii = complex<double>(0.0, 1.0);

void pade( int M, double* iw, complex<double>* Giw, 
           int N, double* w, complex<double>* Gw )
{
  int GMP_default_prec = 256; 
  unsigned long old_prec = mpf_get_default_prec();
  mpf_set_default_prec(GMP_default_prec);

  int P = M;
  gmp_complex** g = new gmp_complex*[P];
  for(int p=0; p<P; p++)
    g[p] = new gmp_complex[M];   
    
  for(int n=0; n<M; n++)
  {  g[0][n] = Giw[n];
     //printf("p: 0 n: %d ----> g = (%.2f, %.2f)\n",n,real(g[0][n]), imag(g[0][n]) );
  }
 

  for(int p=1; p<P; p++)   
    for(int n=p; n<M; n++)   
    {  gmp_complex y = {0.0, iw[n] - iw[p-1]};  
       g[p][n] =   ( g[p-1][p-1]-g[p-1][n] ) 
                / (       y  
                            * g[p-1][n]        );
//       if ( (real(g[p][n])!=real(g[p][n])) or (g[p][n].im!=g[p][n])) )
//            printf("p: %d n: %d ----> g = (%.2f, %.2f)\n",p,n,real(g[p][n]), imag(g[p][n]) );
    }

  gmp_complex* A = new gmp_complex[M+1];
  gmp_complex* B = new gmp_complex[M+1];
    
  A[0].re = 0.0;
  A[0].im = 0.0;
  A[1] = g[0][0];
  B[0].re = 1.0;
  B[0].im = 0.0;
  B[1].re = 1.0;
  B[1].im = 0.0;
  
  for(int i=0; i<N; i++)
  {  for(int n=2; n<=M; n++)
     {  gmp_complex y = {w[i], iw[n-1]}; 
        A[n] = A[n-1] + y * g[n-1][n-1] * A[n-2];
        B[n] = B[n-1] + y * g[n-1][n-1] * B[n-2];

  /*      if (A[n]/B[n]!=A[n]/B[n]) 
        {  Gw[i] = A[n-2]/B[n-2];
           printf("i: %d n: %d DIFF:%.2le --- NAN\n", i,n, abs(   (A[n-2]/B[n-2]).im - (A[n-1]/B[n-1]).im ) );
           break;
        }
*/
        if ( (n>=10) 
             and
             ( abs(   (A[n-1]/B[n-1]).im 
                    - (A[n]/B[n]).im
                  ) < 5e-4
             )
           ) 
        { gmp_printf("i: %d n: %d DIFF:%.*F\n", i,n, abs(   imag(A[n-1]/B[n-1]) - imag(A[n]/B[n]) ) ); 
          gmp_complex G = A[n]/B[n];
          Gw[i] = complex<double>( G.re.get_d(), G.re.get_d());
          break;
        }
     }
     
  }

  for(int p=0; p<P; p++)
    delete [] g[p];
  delete [] g;
  delete [] A;
  delete [] B;

  mpf_set_default_prec(old_prec);
}


int main(int argc, char* argv [])
{
  if (argc<2) { printf("filename needed"); exit(0); }
  
  int M;  
  complex<double>* Giw;
  double* iw;
  ReadFunc(argv[1], M, Giw, iw);

  int N = 200;  
  double wmax = 4.0;
  complex<double>* Gw = new complex<double>[N];
  double* w = new double[N];
  for(int i=0; i<N; i++)
    w[i] = - wmax + i * 2.0*wmax/(N-1.0); 

  pade( 1000, iw, Giw, 
        N,     w, Gw );

  char FN[200];
  sprintf(FN,"PadeOut.%s",argv[1]);
  PrintFunc(FN, N, Gw, w);

  delete [] Giw;
  delete [] iw;
  delete [] Gw;
  delete [] w;
}
